<div id="content">
  <div class="container">
    <br>
    <button onclick="Home()" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-home" aria-hidden="true"></span> 預設位置</button>
    <hr>
    <h1>尋找鄰近咖啡廳</h1> 
    <div>
      <h3>定位：</h3>
      <span class="text">到達</span>
      <button onclick="My_pos()" type="button" class="btn btn-info">我的位置</button><br>
      <h3>搜尋：</h3>
      <span class="text"> 走路 </span>
      <select class="form-control" id="max-duration">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="20">20</option>
      </select>
      <span class="text">分鐘</span><br>
      <span class="text">可達的咖啡廳</span>
      <button id="search-within-time" type="button" class="btn btn-info">走！！</button>
    </div>
  </div>
</div>

<div id="map"></div>
<script type="text/javascript">
  var map;

  var pos;

  var locations = [];

  var markers = [];

      function initMap() {
        //Create your own style
        var  styles = [
  {
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#212121"
      }
    ]
  },
  {
    "elementType": "labels.icon",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#757575"
      }
    ]
  },
  {
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#212121"
      }
    ]
  },
  {
    "featureType": "administrative",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#757575"
      }
    ]
  },
  {
    "featureType": "administrative.country",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#9e9e9e"
      }
    ]
  },
  {
    "featureType": "administrative.land_parcel",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  },
  {
    "featureType": "administrative.locality",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#bdbdbd"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#757575"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#181818"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#616161"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#1b1b1b"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#2c2c2c"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#8a8a8a"
      }
    ]
  },
  {
    "featureType": "road.arterial",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#373737"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#3c3c3c"
      }
    ]
  },
  {
    "featureType": "road.highway.controlled_access",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#4e4e4e"
      }
    ]
  },
  {
    "featureType": "road.local",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#616161"
      }
    ]
  },
  {
    "featureType": "transit",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#757575"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#000000"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#3d3d3d"
      }
    ]
  }
        ]; 

        // Constructor creates a new map - only center and zoom are required.
        
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 23.781389, lng: 120.958699},
          zoom: 8,
          styles: styles,
          mapTypeControlOptions: {
            mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain','styled_map']
          }
        });


        <% @coffees.each do |coffee| %>
          locations.push({title: "<%= coffee.name %>", open_time: "<%= coffee.open_time %>", address: "<%= coffee.address %>", url: "<%= coffee.url %>", location: {lat: <%= coffee.latitude.to_f %>, lng: <%= coffee.longitude.to_f %>}});
        <% end %>


      var largeInfowindow = new google.maps.InfoWindow();

      var defaultIcon = makeMarkerIcon('0091ff');

        //Create a "highlighted location" marker color for when the user
        //Mouse over the marker
      var highlightedIcon = makeMarkerIcon('FFFF24')

        for (var i = 0; i < locations.length; i++) {
          // Get the position from the location array.
          var position = locations[i].location;
          var title = '<h3>' + locations[i].title + '</h3><br>' + '營業時間：' + locations[i].open_time + '<br>' + '地址：' + locations[i].address + '<br>' + '相關連結：' + '<a href=' + locations[i].url + '>' + locations[i].url + '</a>';
          // Create a marker per location, and put into markers array.
          var marker = new google.maps.Marker({
            map: map,
            position: position,
            title: title,
            icon: defaultIcon,
            animation: google.maps.Animation.DROP,
            id: i
          });

          markers.push(marker);

          marker.addListener('click', function() {
            populateInfoWindow(this, largeInfowindow);
          });

          marker.addListener('mouseover', function(){
            this.setIcon(highlightedIcon);
          });
          marker.addListener('mouseout', function(){
            this.setIcon(defaultIcon);
          });


      }

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            //定位點的infowindow 並自動打開
            // pos_infoWindow.setPosition(pos);
            // pos_infoWindow.setContent('Location found.');

            // var posMarker = new google.maps.Marker({
            //   position: {lat: pos['lat'], lng: pos['lng']},
            //   title: '我的位置',
            //   map: map,
            // }); 

            // var pos_infoWindow = new google.maps.InfoWindow();

            // posMarker.addListener('click', function() {
            //   posInfoWindow(this, pos_infoWindow);
            // });


            // map.setCenter(pos);
            // map.setZoom(16);
            // pos_infoWindow.open(map);

          });
        }

      var markerCluster = new MarkerClusterer(map, markers, {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});

        document.getElementById('search-within-time').addEventListener('click', function() {
          searchWithinTime();
        });

    }

      function makeMarkerIcon(markerColor) {
        var markerImage = new google.maps.MarkerImage(
          'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
          '|40|_|%E2%80%A2',
          new google.maps.Size(21, 34),
          new google.maps.Point(0, 0),
          new google.maps.Point(10, 34),
          new google.maps.Size(21,34));
        return markerImage;                   
      }

      function populateInfoWindow(marker, infowindow) {
        // Check to make sure the infowindow is not already opened on this marker.
        if (infowindow.marker != marker) {

          infowindow.setContent('');
          infowindow.marker = marker;
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick',function(){
            infowindow.marker = null;
          });

          infowindow.setContent('<div>' + marker.title + '</div>');


          infowindow.open(map, marker);
        }  

      }

      function posInfoWindow(marker, infowindow) {
        // Check to make sure the infowindow is not already opened on this marker.
        if (infowindow.marker != marker) {

          infowindow.setContent('');
          infowindow.marker = marker;
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick',function(){
            infowindow.marker = null;
          });

          infowindow.setContent('<div>' + marker.title + '</div>');


          infowindow.open(map, marker);
        }  

      }

      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
      }

      function My_pos() {

        var posMarker = new google.maps.Marker({
          position: {lat: pos['lat'], lng: pos['lng']},
          title: '我的位置',
          map: map,
        }); 

        var pos_infoWindow = new google.maps.InfoWindow();

        posMarker.addListener('click', function() {
          posInfoWindow(this, pos_infoWindow);
        });
        
        map.setCenter(pos);
        map.setZoom(16);

      }

      function Home() {
        map.setCenter({lat: 23.781389, lng: 120.958699});
        map.setZoom(8);
      }

      var marker_id = [];

      function searchWithinTime() {
        // Initailize the distance matrix service.
        var distanceMatrixService = new google.maps.DistanceMatrixService;

          // Use the distance matrix service to calculate the duration of the routes between all our markers, and the destination address entered by the user. Then put all the origins into an origin matrix.
          var destinations = [];
          marker_id = [];
          for (var i = 0; i < markers.length; i++) {
            if (locations[i].location.lat <= pos.lat+0.005 && locations[i].location.lng <= pos.lng+0.005 && locations[i].location.lat >= pos.lat-0.005 && locations[i].location.lng >= pos.lng-0.005 ){
              destinations.push(locations[i].location);
              marker_id.push(i);
            }
          }  
          console.log(destinations);
          console.log(marker_id);
          var origin = pos;
          var mode = 'WALKING';
          // Now that both the origins and destination are defined, get all the info for the distances between them.
          distanceMatrixService.getDistanceMatrix({
            origins: [origin],
            destinations: destinations,
            travelMode: google.maps.TravelMode[mode],
            unitSystem: google.maps.UnitSystem.IMPERIAL,
          }, function(response, status) {
            if (status !== google.maps.DistanceMatrixStatus.OK) {
              window.alert('Error was' + status);
            } else {
              console.log(response);
              displayMarkersWithinTime(response);
            }

          });
        

      }

      function displayMarkersWithinTime(response) {
        var maxDuration = document.getElementById('max-duration').value;
        var origins = response.originAddresses;
        var destinations = response.destinationAddresses;
        // Parse through the results, and get the distance and duration of each.
        // Because there might be multiple origins and destination we have a nested loop
        //Then, make sure at least 1 result was found.
        var atLeastOne = false;
        for (var i = 0; i < origins.length; i++) {
          var results = response.rows[i].elements;
          for (var j = 0; j < results.length; j++) {
            var element = results[j];
            if (element.status === "OK") {
              // The distance is returned in feet, but the TEXT is in miles. If we wanted to switch the function to show markers within a user-entered DISTANCE, we would need the value for distance, but for now we only need the text.
              var distanceText = element.distance.text;
              // Duration value is given in seconds so we make it MINUTES. We need both the value and the text.
              var duration = element.duration.value/60;
              var durationText = element.duration.text;
              if (duration <= maxDuration) {
                //the origin [i] should = the marker[i]
                markers[marker_id[j]].setMap(map);
                atLeastOne = true;
                // Create a mini infowindow to open immediately and contain the distance and duration
                var infowindow = new google.maps.InfoWindow({
                  content: durationText + ' away, ' + distanceText + '<div><input type=\"button\" value=\"View Route\" onclick =' + '\"displayDirections(&quot;' + destinations[j] + '&quot;);\"></input></div>'
                }); 
                infowindow.open(map, markers[marker_id[j]]);
                // Put this in so that this small window closes if the user clicks the marker, when the big infowindow opens
                markers[i].infowindow = infowindow;
                google.maps.event.addListener(markers[marker_id[j]], 'click', function(){
                  this.infowindow.close();
                });
              }
            }
          }
        }
      }

      //This function is in response to the user selecting "show route" on one of the markers within the calculated distance. This will display the route on the map.

      function displayDirections(destination) {
        var directionsService = new google.maps.DirectionsService;
        //Get mode again from the user entered value.
        var mode = 'WALKING';
        directionsService.route({
          //The origin is the passed in marker's position.
          origin: pos,
          //The destination is user enterd address.
          destination: destination,
          travelMode: google.maps.TravelMode[mode]
        }, function(response, status){
          if (status == google.maps.DirectionsStatus.OK) {
            var directionsDisplay = new google.maps.DirectionsRenderer({
              map: map,
              directions: response,
              draggable: true,
              polylineOptions: {
                strokeColor: 'green'
              }
          });
        } else {
          window.alert('Directions request failed due to ' + status);
        }
       });
      }

</script>
